<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="krusli.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="krusli.github.io/" rel="alternate" type="text/html" /><updated>2018-04-07T15:38:25+10:00</updated><id>krusli.github.io/</id><title type="html">write|read</title><subtitle>Musings, random snippets. Miscellaneous stuff I feel like putting up on a blog.
</subtitle><author><name>by Kenneth Aloysius</name></author><entry><title type="html">Pi Zero W + iPad, flashing QMK with a Pi, and some musings</title><link href="krusli.github.io/2018/04/05/pi-zero-qmk.html" rel="alternate" type="text/html" title="Pi Zero W + iPad, flashing QMK with a Pi, and some musings" /><published>2018-04-05T00:00:00+10:00</published><updated>2018-04-05T00:00:00+10:00</updated><id>krusli.github.io/2018/04/05/pi-zero-qmk</id><content type="html" xml:base="krusli.github.io/2018/04/05/pi-zero-qmk.html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;One of the best things about trying to use an iPad seriously as a daily driver machine is coming up with fun ways around the arbitrary limitations Apple sets up in iOS. Being a mechanical keyboard enthusiast myself, I usually prefer to use my iPad with one of my portable keyboards (the KPRepublic JJ40 or my Happy Hacking Keyboard Professional 2&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;), and I run QMK, the Quantum Mechanical Keyboard firmware on them.&lt;/p&gt;

&lt;p&gt;It’s a well known fact that Apple keeps its iOS platform locked down tight - back then running unsigned code if you don’t have a jailbreak was impossible (since &lt;a href=&quot;https://www.lifehacker.com.au/2015/12/how-to-install-unapproved-apps-on-an-iphone-without-jailbreaking/&quot;&gt;Xcode 7&lt;/a&gt; one could self-sign applications to run on the iPad, although that involves renewing the signing certificate every few months). Even if you could somehow get &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc-avr&lt;/code&gt; and the dependencies installed somehow, compiled a &lt;code class=&quot;highlighter-rouge&quot;&gt;.hex&lt;/code&gt; to flash, the iPad doesn’t allow apps any access to the USB port on the Camera Connection Kit (CCK) - so no luck there.&lt;/p&gt;

&lt;p&gt;I’ve toyed with the idea of having a Raspberry Pi along with my iPad to somewhat replicate my iPad + VPS setup several times before so I have access to a (relatively) full-fledged computing environment. The iPad fares just fine for editing code and taking notes (although a larger screen than the 9.7” one on my Pro would be swell), but it’s really dependent on having a good internet connection to access and control my VPS. Add to that my experience of accidentally flashing the wrong file on my keyboard, leaving me keyboard-less on my iPad until I got home to my laptop.&lt;/p&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt;
&lt;p&gt;Enter the Raspberry Pi Zero W - at a low price of $10 for one (and after shelling out some more for the official case) this diminutive device has pretty much the same specifications as the original Raspberry Pi which has come to be loved by many. The W stands for Wireless, which means it has WiFi and Bluetooth wireless radios built-in, much like the Model 3B.&lt;/p&gt;

&lt;p&gt;After an install of Raspbian Stretch, I followed &lt;a href=&quot;http://www.40percent.club/2017/10/pi-zero-tmk-isp.html&quot;&gt;this&lt;/a&gt; guide to set up QMK on my iPad, but with the Debian instructions to &lt;a href=&quot;https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_build_tools.md&quot;&gt;set up the build environment&lt;/a&gt; from the original guide instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install&lt;/code&gt; command in that blog post.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; of the original QMK repo later, I proceeded to try to compile a keymap - success, although it seemed to take closer to a minute to compile instead of the ~10s it usually takes on my Mac.&lt;/p&gt;

&lt;h3 id=&quot;dfu-programmer-for-flashing-ps2avrgb-boards&quot;&gt;dfu-programmer for flashing PS2AVRGB boards&lt;/h3&gt;
&lt;p&gt;For a typical atmega32u4 board running the Caterina or DFU bootloaders, the required tools for flashing the boards should already be installed after following the “setting up the build environment” guide above. Follow the respective instructions from QMK for your keyboard.&lt;/p&gt;

&lt;p&gt;The bootloader and flashing tool used for the PS2AVRGB (atmega32a) boards, however, isn’t installed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install&lt;/code&gt; command. The PS2AVRGB (base/board) repos also lacked instructions for setting up &lt;code class=&quot;highlighter-rouge&quot;&gt;dfu-programmer&lt;/code&gt; on Linux, with the instructions pointing to using &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; and installing &lt;code class=&quot;highlighter-rouge&quot;&gt;dfu-programmer&lt;/code&gt; from a Homebrew tap (macOS-specific).&lt;/p&gt;

&lt;p&gt;A bit of sleuthing brought up &lt;a href=&quot;https://www.reddit.com/r/MechanicalKeyboards/comments/76evne/jj40_now_supported_in_qmk/&quot;&gt;this Reddit post&lt;/a&gt; with instructions on how to compile BootloadHID (source code link &lt;a href=&quot;https://www.obdev.at/downloads/vusb/bootloadHID.2012-12-08.tar.gz&quot;&gt;here&lt;/a&gt;). Just install &lt;!--pyusb (`pip install pyusb`) and --&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;libusb-dev&lt;/code&gt; dependency using &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libusb-dev&lt;/code&gt; before compiling bootloadHID, then copy the compiled binary to &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; after compilation so it is accessible from anywhere (alternatively you can simply add the directory with the bootloadHID binary to &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The linked guide also shows how to put the board into bootloader mode, but I simply manually booted my JJ40 into bootloader mode (hold backspace while plugging in - may differ between boards).&lt;/p&gt;

&lt;h3 id=&quot;raspberry-pi-as-an-access-point&quot;&gt;Raspberry Pi as an Access Point&lt;/h3&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md&quot;&gt;this guide&lt;/a&gt; on the Raspberry Pi website to set it up as an access point.&lt;/p&gt;

&lt;p&gt;After the setup, connect the iPad to the WiFi network you configured earlier. The Pi would then be accessible at &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.4.1&lt;/code&gt; once you’ve connected to the Pi’s network.&lt;/p&gt;

&lt;h3 id=&quot;enabling-ssh-vnc&quot;&gt;Enabling SSH, VNC&lt;/h3&gt;
&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;raspi-config&lt;/code&gt; to enable SSH and VNC. SSH enables us to remotely control a secure shell on the Pi, and VNC lets us remotely control the Pi’s GUI (if the Pi is running a version of Raspbian with a GUI). I used &lt;a href=&quot;https://itunes.apple.com/au/app/vnc-viewer-remote-desktop/id352019548&quot;&gt;VNC Viewer&lt;/a&gt;, although you could choose from the excellent wealth of VNC client applications (Screens is a good recommendation from many).&lt;/p&gt;

&lt;h3 id=&quot;android-and-other-platforms&quot;&gt;Android and other platforms&lt;/h3&gt;
&lt;p&gt;These instructions are platform-independent: you could SSH (and/or VNC) into your Raspberry Pi with the respective tools on any platform. On Android, you could set up &lt;a href=&quot;https://termux.com/&quot;&gt;Termux&lt;/a&gt; and install &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, then connect to the Pi’s wireless network and ssh the pi to compile and flash the firmware. On Windows we have PuTTY, and on macOS or Linux, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; in the built-in Terminal emulators would work.&lt;/p&gt;

&lt;h2 id=&quot;thoughts-on-the-pi-zero&quot;&gt;Thoughts on the Pi Zero&lt;/h2&gt;
&lt;p&gt;The size and weight is quite impressive - it actually fits in one of my IEM cases.&lt;/p&gt;

&lt;p&gt;One of the things you’ll be compromising on is on port selection though: compared to my regular Pi Model 3B, the Zero only has one single microUSB for USB on-the-go, requiring a dongle/adapter to get a full-sized USB port. The HDMI port on the Zero is also of the miniHDMI variety: as I did not have a miniHDMI to HDMI cable or adapter I simply did the entire setup process on my 3B and swapped the SD card into the Zero afterwards. Stunningly everything worked, except for the fact that my right-angled USB on-the-go adapter wouldn’t fit due to it blocking the microUSB power in port. And like the (frustrating) trend in smartphones, it no longer has a 3.5mm jack.&lt;/p&gt;

&lt;p&gt;Although for the price, size, I don’t have too many complaints either way.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;using the alt controller by Hasu so it could run QMK, itself a fork of TMK. It’s not as much the programmability I needed at first, but the fact that the stock HHKB will not work with the iOS Camera Connection Kit because it reports a power draw that is too high (&amp;gt;100 mA) due to the fact that it has a USB hub built-in.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>by Kenneth Aloysius</name></author><summary type="html">Background One of the best things about trying to use an iPad seriously as a daily driver machine is coming up with fun ways around the arbitrary limitations Apple sets up in iOS. Being a mechanical keyboard enthusiast myself, I usually prefer to use my iPad with one of my portable keyboards (the KPRepublic JJ40 or my Happy Hacking Keyboard Professional 21), and I run QMK, the Quantum Mechanical Keyboard firmware on them. using the alt controller by Hasu so it could run QMK, itself a fork of TMK. It’s not as much the programmability I needed at first, but the fact that the stock HHKB will not work with the iOS Camera Connection Kit because it reports a power draw that is too high (&amp;gt;100 mA) due to the fact that it has a USB hub built-in.&amp;nbsp;&amp;#8617;</summary></entry><entry><title type="html">Restoring default firmware on a Mechkeys.ca Mechmini 1</title><link href="krusli.github.io/2017/08/31/flashing-a-mechmini.html" rel="alternate" type="text/html" title="Restoring default firmware on a Mechkeys.ca Mechmini 1" /><published>2017-08-31T00:00:00+10:00</published><updated>2017-08-31T00:00:00+10:00</updated><id>krusli.github.io/2017/08/31/flashing-a-mechmini</id><content type="html" xml:base="krusli.github.io/2017/08/31/flashing-a-mechmini.html">&lt;p&gt;I had QMK installed on my Mechmini and was looking for a way to restore it to the original firmware. A quick Google search found nothing particularly useful, so I thought I’d note this down in case anyone needs any help with this.&lt;/p&gt;

&lt;p&gt;The steps were done on a Mac, but it should work just fine on Windows too (bar the additional driver installations, if any).&lt;/p&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mechmini.hex&lt;/code&gt; from &lt;a href=&quot;https://oldsite.mechkeys.ca/help/&quot;&gt;Mechkeys.ca’s old site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ps2avrGB_firmware_V1.3.2_170531.zip&lt;/code&gt; from &lt;a href=&quot;https://github.com/showjean/ps2avrU/releases&quot;&gt;ps2avrU GitHub repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;BootMapper Client from this &lt;a href=&quot;https://github.com/unxmaal/mechkeys_howto&quot;&gt;Bootmapper client guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://krusli.me/files/bootmapper.json&quot;&gt;my .json keymap&lt;/a&gt;. Right click the link and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Save link as file&lt;/code&gt; (or similar).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Open BootMapper Client and go to the &lt;em&gt;Options&lt;/em&gt; tab.&lt;/li&gt;
  &lt;li&gt;Hold down &lt;code class=&quot;highlighter-rouge&quot;&gt;L_Ctrl&lt;/code&gt; when plugging in the keyboard to enter bootloader mode on the keyboard. Flash the &lt;code class=&quot;highlighter-rouge&quot;&gt;ps2avrGB_NKRO.hex&lt;/code&gt; file from &lt;code class=&quot;highlighter-rouge&quot;&gt;ps2avrGB_firmware_V1.3.2_170531.zip&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Flash &lt;code class=&quot;highlighter-rouge&quot;&gt;mechmini.hex&lt;/code&gt; afterwards. This might not be necessary as the &lt;code class=&quot;highlighter-rouge&quot;&gt;mechmini.hex&lt;/code&gt; file just seems to be a keymap (which shows up as all jumbled on my end).&lt;/li&gt;
  &lt;li&gt;Go to the &lt;em&gt;Key Mapper&lt;/em&gt; tab. If you see a jumble of keys, just load my &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; keymap and click &lt;em&gt;Upload&lt;/em&gt; after tweaking it to your liking.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/unxmaal/mechkeys_howto&lt;/li&gt;
  &lt;li&gt;https://github.com/qmk/qmk_firmware/tree/master/keyboards/mechmini&lt;/li&gt;
&lt;/ul&gt;</content><author><name>by Kenneth Aloysius</name></author><summary type="html">I had QMK installed on my Mechmini and was looking for a way to restore it to the original firmware. A quick Google search found nothing particularly useful, so I thought I’d note this down in case anyone needs any help with this.</summary></entry><entry><title type="html">Angular 4 personal website - a “build log”</title><link href="krusli.github.io/2017/08/20/website-build-log.html" rel="alternate" type="text/html" title="Angular 4 personal website - a &quot;build log&quot;" /><published>2017-08-20T00:00:00+10:00</published><updated>2017-08-20T00:00:00+10:00</updated><id>krusli.github.io/2017/08/20/website-build-log</id><content type="html" xml:base="krusli.github.io/2017/08/20/website-build-log.html">&lt;p&gt;&lt;img src=&quot;assets/website-old.jpg&quot; alt=&quot;Old version&quot; /&gt;
&lt;em&gt;Old version of the website&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Insomnia is hitting me hard - and after hours of trying to (and failing at) falling asleep, I decided that I might as well make my time worthwhile while I’m at it.&lt;/p&gt;

&lt;p&gt;I’ve had some ideas at the top of my head for what I wanted in my website. In particular, I wanted my website to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tell my &lt;em&gt;story&lt;/em&gt; better - in a format that reads more like a narrative,&lt;/li&gt;
  &lt;li&gt;be more maintainable,&lt;/li&gt;
  &lt;li&gt;have reusable common elements - through Components,&lt;/li&gt;
  &lt;li&gt;as a side benefit, implement the Single Page Application model,&lt;/li&gt;
  &lt;li&gt;let me try my hand at web design and development again,&lt;/li&gt;
  &lt;li&gt;at the very least, have no dead links (right now, the &lt;em&gt;About me&lt;/em&gt; and &lt;em&gt;My projects&lt;/em&gt; links are pretty much dead) 😅, and&lt;/li&gt;
  &lt;li&gt;implement the design ideas I sketched and had floating around my head for weeks but never got around to finally implementing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used Angular before for several projects: &lt;a href=&quot;http://hookturns.info&quot;&gt;&lt;em&gt;HookTurns&lt;/em&gt;&lt;/a&gt; and  &lt;a href=&quot;https://openelement.herokuapp.com&quot;&gt;&lt;em&gt;OpenElement&lt;/em&gt;&lt;/a&gt;, and although the learning curve for Angular was quite steep, I found Angular’s rich feature-set especially rewarding for me.&lt;/p&gt;

&lt;p&gt;Alas that’s enough of an introduction - I should get started with the project.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/@angular/cli&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@angular/cli&lt;/code&gt;&lt;/a&gt; - this utility lets you easily create a project, run it locally, build the project, run tests and even reduces the amount of boilerplate code you have to write for Components, Directives, Services. Just use this - it makes your life easier, and makes me wish I started with this when I first worked with Angular&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I’ve used &lt;a href=&quot;https://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt; several times before (including my old site), and I’m coming back to it for this version of the website too. If you’re not familiar with it (unlikely), Bootstrap is a front-end framework for responsive design websites, providing a grid system, UI elements and components, and styling (which can still be customised via CSS).&lt;/p&gt;

&lt;h3 id=&quot;design&quot;&gt;Design&lt;/h3&gt;
&lt;p&gt;Instead of simply building off a Bootstrap template, I wanted to use Bootstrap elements (and design “patterns”) with some code to help with the UI behaviours I want:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/top-bar1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;assets/top-bar2.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;A top bar that collapses when users scroll down on the page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;assets/nav-indicator1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;assets/nav-indicator2.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;A navigation indicator (on the right-hand side of the pages here) to indicate the user’s current location and lets the user jump between sections. I plan to have my navigation indicator on the left hand side of the page though.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;assets/album.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Album-style view, for a projects showcase.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Google’s &lt;a href=&quot;https://angular.io/guide/quickstart&quot;&gt;Angular guides&lt;/a&gt; had me configuring the dev environment myself - downloading the libraries, configuring scripts for the webserver and transpiler, taking too much effort and even refusing to do a Webpack build for me in the end. The guide has since been updated to use &lt;code class=&quot;highlighter-rouge&quot;&gt;@angular/cli&lt;/code&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>by Kenneth Aloysius</name></author><summary type="html">Old version of the website</summary></entry></feed>